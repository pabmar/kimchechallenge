{"version":3,"sources":["components/countrySearchContainer/CountryCard/CountryCard.js","components/countrySearchContainer/CountryCardGroup/CountryCardGroup.js","components/countrySearchContainer/CountrySearchContainer.js","client.js","App.js","serviceWorker.js","index.js"],"names":["CountryCard","country","Flag","Flags","code","link","name","Grid","item","xs","Card","CardContent","Typography","color","gutterBottom","variant","component","native","capital","phone","currency","CardActions","Button","size","href","target","CountryCardGroup","groupCountries","container","spacing","group","countries","map","countriesDetail","ALL_COUNTRY","gql","filterCountries","filter","list","filteredCountryList","includes","str","charAt","toUpperCase","slice","toLowerCase","contList","continents","continentsFilter","index","length","push","continent","Set","getContinents","contReturn","i","countryContinent","countriesFiltered","lanList","countriesL","languagesFilter","languages","getlanguages","lanReturn","languagesGroupFilter","detailLanguagesList","ind","countryLanguages","CountrySearchContainer","props","useQuery","data","loading","error","useState","renderCountries","setRenderCountries","groupByValue","setgroupByValue","searchCountries","setSearchCountries","handleChange","event","value","filterList","countrylist","Box","sx","mt","Paper","p","minHeight","centered","IconButton","type","aria-label","onClick","TextField","placeholder","inputProps","onKeyUp","onKeyUpValue","RadioGroup","row","aria-labelledby","defaultValue","FormControlLabel","onChange","control","Radio","label","filteredCountry","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.23a75680.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport Card from '@mui/material/Card';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport Grid from '@mui/material/Grid';\r\nimport Flags from 'country-flag-icons/react/3x2'\r\n \r\n\r\n \r\n \r\nconst CountryCard = ({country}) =>{\r\n    const Flag = Flags[country.code]\r\n\r\n    const link = `https://www.google.com/search?q=${country.name}`\r\n    return <Grid item xs={4}>\r\n              \r\n  <Card >\r\n    <CardContent>\r\n      <Typography   color=\"text.secondary\" gutterBottom>\r\n \r\n      </Typography>\r\n      <Typography variant=\"h5\" component=\"div\">\r\n          <Grid item>\r\n              <Grid item xs={1}><Flag></Flag></Grid>\r\n              <Grid item>{country.name}</Grid>\r\n          </Grid>\r\n   \r\n      </Typography>\r\n      <Typography color=\"text.secondary\">\r\n        {country.native}\r\n      </Typography>\r\n      <Typography variant=\"body2\">\r\n        Capital: {country.capital}\r\n        <br></br>\r\n        Phone Code: {country.phone}\r\n        <br></br>\r\n        Currecy: {country.currency}\r\n        <br></br>\r\n        \r\n  \r\n      </Typography>\r\n    </CardContent>\r\n    <CardActions>\r\n      <Button size=\"small\" href={link} target=\"_blank\">Learn More</Button>\r\n    </CardActions>\r\n  </Card>\r\n        </Grid>\r\n\r\n\r\n \r\n}\r\n\r\nexport default CountryCard","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport CountryCard from '../CountryCard/CountryCard';\r\n\r\n\r\n\r\n\r\nconst CountryCardGroup  = ({groupCountries}) => {\r\n return (\r\n     <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n           <h3>{groupCountries.group}</h3> \r\n        </Grid>\r\n        {groupCountries.countries.map(countriesDetail =>(\r\n            <CountryCard country={countriesDetail} ></CountryCard>\r\n        ))}\r\n     \r\n      </Grid> \r\n\r\n\r\n )\r\n  \r\n //\r\n\r\n\r\n}\r\n\r\nexport default CountryCardGroup","import React, { useState} from 'react'\r\nimport {useQuery, gql} from '@apollo/client'\r\nimport Box from '@mui/material/Box';\r\n\r\nimport Grid from '@mui/material/Grid';\r\n\r\nimport IconButton from '@mui/material/IconButton';\r\nimport SearchIcon from '@mui/icons-material/Search';    \r\nimport CountryCardGroup from './CountryCardGroup/CountryCardGroup';\r\nimport Radio from '@mui/material/Radio';\r\nimport RadioGroup from '@mui/material/RadioGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport { Paper, TextField } from '@mui/material';\r\n\r\n const ALL_COUNTRY  = gql`\r\n {\r\n   countries{\r\n     name,\r\n     code,\r\n     capital,\r\n     native,\r\n     currency,\r\n     phone,\r\n     continent{\r\n       name\r\n     }\r\n     languages{\r\n       name\r\n     },\r\n     emoji\r\n \r\n   }\r\n }`\r\n\r\n function textFormat(str) {\r\n    return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\r\n}\r\n\r\n const getlanguages = (countriesL) =>{\r\n    let languagesFilter = []\r\n    for (let index = 0; index < countriesL.length; index++) {\r\n       \r\n        for (let i = 0; i < countriesL[index].languages.length; i++) {\r\n            languagesFilter.push(countriesL[index].languages[i].name);\r\n            \r\n        }\r\n        \r\n    }\r\n    return [...new Set(languagesFilter)]\r\n    \r\n}\r\n\r\nconst getContinents = (continents) =>{\r\n\r\n     let continentsFilter = []\r\n     for (let index = 0; index < continents.length; index++) {\r\n         continentsFilter.push(continents[index].continent.name);\r\n        \r\n    }\r\n    return  [...new Set(continentsFilter)]\r\n     \r\n}\r\n\r\nconst filterCountries = (filter,list,group) =>{\r\n    const filteredCountryList = (list.filter(country => country.name.includes(textFormat(filter))))\r\n    if(group === 'Continents'){\r\n        let contList = getContinents(filteredCountryList)\r\n        let contReturn = []\r\n        for (let i = 0; i < contList.length; i++) {\r\n            let countryContinent = {group:contList[i],countries:filteredCountryList.filter(countriesFiltered =>countriesFiltered.continent.name.includes(contList[i]) )}\r\n            contReturn.push(countryContinent);\r\n            \r\n        }\r\n \r\n        return contReturn\r\n    }\r\n    if (group === 'Languages'){\r\n\r\n        let lanList = getlanguages(filteredCountryList)\r\n        let lanReturn = []\r\n        \r\n        for (let i = 0; i < lanList.length; i++) {\r\n            let languagesGroupFilter = []\r\n            \r\n           // lanReturn.push(countryLanguages);\r\n           for (let index = 0; index < filteredCountryList.length; index++) {\r\n               let detailLanguagesList = filteredCountryList[index].languages\r\n               for (let ind = 0; ind < detailLanguagesList.length; ind++) {\r\n                if (detailLanguagesList[ind].name === lanList[i]) {\r\n                    languagesGroupFilter.push(filteredCountryList[index]);   \r\n               \r\n                   \r\n                   }\r\n               }\r\n               \r\n           }\r\n            let countryLanguages = {group:lanList[i],countries:languagesGroupFilter}\r\n            lanReturn.push(countryLanguages)\r\n        }\r\n    \r\n        return lanReturn\r\n\r\n    }\r\n    return filteredCountryList\r\n}\r\n\r\nconst CountrySearchContainer = props => {\r\n    const {data , loading,error} = useQuery(ALL_COUNTRY);\r\n    const [renderCountries,setRenderCountries] = useState([])\r\n    const [groupByValue, setgroupByValue] = useState('Continents');\r\n    const [searchCountries,setSearchCountries] = useState('');\r\n\r\n\r\n    const handleChange = (event) => {\r\n      setgroupByValue(event.target.value);\r\n\r\n      const filterList = filterCountries(searchCountries,countrylist,event.target.value)\r\n      setRenderCountries(filterList)  \r\n    };\r\n    \r\n    const searchButton = () =>{\r\n        const filterList = filterCountries(searchCountries,countrylist,groupByValue)\r\n        setRenderCountries(filterList)  \r\n    }\r\n \r\n    \r\n   \r\n    if(loading){\r\n      return <div>\r\n  \r\n      </div>\r\n    }\r\n    if (error){\r\n      return <p>Error en data</p>\r\n    } \r\n    const countrylist = data.countries\r\n    \r\n    function onKeyUpValue(event) {\r\n\r\n        const filterList = filterCountries(event.target.value,countrylist,groupByValue)\r\n        setSearchCountries(event.target.value)\r\n        setRenderCountries(filterList)\r\n        \r\n    }\r\n   \r\n    \r\n    return ( <Box sx={{ mt: 2}} >\r\n        <Paper \r\n      sx={{ p: '2px 4px',minHeight:'40px'}}>\r\n        <Grid container spacing={2} centered>\r\n            <Grid item>\r\n            <IconButton type=\"submit\" sx={{ p: '10px' }} aria-label=\"search\" onClick={searchButton}>\r\n                <SearchIcon />\r\n            </IconButton>\r\n            <TextField\r\n             \r\n                placeholder=\"Search Countries\"\r\n                variant=\"standard\"\r\n                inputProps={{ 'aria-label': 'Search Countries','type':'search' }}\r\n                onKeyUp = {(event) =>{\r\n                    onKeyUpValue(event)\r\n                }}\r\n                \r\n            />\r\n            \r\n            </Grid>\r\n            <Grid item>\r\n            \r\n      <RadioGroup\r\n        row\r\n        aria-labelledby=\"demo-form-control-label-placement\"\r\n        name=\"position\"\r\n        defaultValue=\"Continents\"\r\n        \r\n      >\r\n        <FormControlLabel value=\"Continents\" onChange={handleChange} control={<Radio/> } label=\"Continents\" />\r\n        <FormControlLabel value=\"Languages\" onChange={handleChange} control={<Radio />} label=\"Languages\" />\r\n      </RadioGroup>\r\n            </Grid>\r\n\r\n          \r\n      \r\n        </Grid>\r\n      \r\n\r\n        </Paper>\r\n        \r\n\r\n\r\n        <Grid container spacing={2}>\r\n            {renderCountries.length> 0?(renderCountries.map(filteredCountry =>(\r\n            \r\n            <CountryCardGroup groupCountries={filteredCountry}></CountryCardGroup>\r\n               \r\n           )\r\n               \r\n           )):(\r\n             \r\n               <h2> Can't Find any Country, please search Another</h2>\r\n           )\r\n         } \r\n             \r\n        </Grid>\r\n       \r\n    </Box>)\r\n     \r\n}\r\n\r\nexport default CountrySearchContainer;","import { ApolloClient, InMemoryCache } from \"@apollo/client\";\r\n\r\nexport const client = new ApolloClient({\r\n    uri:'https://countries.trevorblades.com/',\r\n    cache: new InMemoryCache()\r\n})\r\n\r\n ","import React from \"react\";\nimport \"./App.css\"; \nimport CountrySearchContainer from \"./components/countrySearchContainer/CountrySearchContainer\";\nimport { ApolloProvider } from '@apollo/client';\nimport { client } from './client';\nimport Container from '@mui/material/Container';\n \nconst App = () => (\n  <ApolloProvider client={client}>\n    <Container >\n      <h1>Country Search</h1>\n      <CountrySearchContainer ></CountrySearchContainer>\n    </Container>\n    \n  </ApolloProvider>\n);\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n \n\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n \nserviceWorker.unregister();\n"],"sourceRoot":""}